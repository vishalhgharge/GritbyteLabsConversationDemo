var k = Object.defineProperty;
var n = (s, o, c) => o in s ? k(s, o, { enumerable: !0, configurable: !0, writable: !0, value: c }) : s[o] = c;
var l = (s, o, c) => n(s, typeof o != "symbol" ? o + "" : o, c);
class h {
  constructor() {
    l(this, "_locking");
    l(this, "_locks");
    this._locking = Promise.resolve(), this._locks = 0;
  }
  isLocked() {
    return this._locks > 0;
  }
  lock() {
    this._locks += 1;
    let o;
    const c = new Promise(
      (i) => o = () => {
        this._locks -= 1, i();
      }
    ), t = this._locking.then(() => o);
    return this._locking = this._locking.then(() => c), t;
  }
}
export {
  h as Mutex
};
//# sourceMappingURL=index.mjs.map
