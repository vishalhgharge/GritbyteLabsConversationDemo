"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioVisualizerUtils = void 0;
var constants_1 = require("../constants");
var AudioVisualizerUtils = /** @class */ (function () {
    function AudioVisualizerUtils() {
    }
    AudioVisualizerUtils.map = function (n, start1, stop1, start2, stop2) {
        return (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;
    };
    AudioVisualizerUtils.filterFrequencies = function (lowFrequency, highFrequency, dataArray, sampleRate) {
        if (lowFrequency === void 0) { lowFrequency = constants_1.LOW_FREQUENCY_LIMIT; }
        if (highFrequency === void 0) { highFrequency = constants_1.HIGH_FREQUENCY_LIMIT; }
        var frequencyStep = sampleRate / 2 / dataArray.length;
        var lowIndex = Math.round(lowFrequency / frequencyStep);
        var highIndex = Math.round(highFrequency / frequencyStep);
        return dataArray.slice(lowIndex, highIndex);
    };
    ;
    AudioVisualizerUtils.getFrequencyInterval = function (lowFrequency, highFrequency, nBars, dataArray, sampleRate) {
        if (lowFrequency === void 0) { lowFrequency = constants_1.LOW_FREQUENCY_LIMIT; }
        if (highFrequency === void 0) { highFrequency = constants_1.HIGH_FREQUENCY_LIMIT; }
        if (!dataArray || dataArray.length === 0 || !sampleRate) {
            return 0;
        }
        var frequencyStep = sampleRate / 2 / dataArray.length;
        var lowIndex = Math.round(lowFrequency / frequencyStep);
        var highIndex = Math.round(highFrequency / frequencyStep);
        var filteredLength = highIndex - lowIndex;
        return Math.floor(filteredLength / nBars);
    };
    ;
    return AudioVisualizerUtils;
}());
exports.AudioVisualizerUtils = AudioVisualizerUtils;
