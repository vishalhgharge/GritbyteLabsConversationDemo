"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioVisualizerController = void 0;
var types_1 = require("../types");
var events_1 = require("./events");
var loaders_1 = require("./loaders");
var DEFAULT_SMOOTHING_TIME_CONSTANT = 0.85;
var DEFAULT_FFT_SIZE = 2048;
var AudioVisualizerController = /** @class */ (function () {
    function AudioVisualizerController(context, smoothingTimeConstant, fftSize) {
        if (smoothingTimeConstant === void 0) { smoothingTimeConstant = DEFAULT_SMOOTHING_TIME_CONSTANT; }
        if (fftSize === void 0) { fftSize = DEFAULT_FFT_SIZE; }
        this.audioSource = null;
        this.audioBuffer = null;
        this.startedAt = 0;
        this.pausedAt = 0;
        this.audioContext = new AudioContext();
        this.gain = this.audioContext.createGain();
        this.analyser = this.audioContext.createAnalyser();
        this.analyser.smoothingTimeConstant = smoothingTimeConstant;
        this.analyser.fftSize = fftSize;
        this.context = context;
        this.gain.connect(this.analyser);
        this.analyser.connect(this.audioContext.destination);
    }
    AudioVisualizerController.prototype.loadAudio = function (audio, setLoading) {
        return __awaiter(this, void 0, void 0, function () {
            var loader, arrayBuffer, _a, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, 4, 5]);
                        setLoading(true);
                        events_1.emitter.emit(events_1.AudioVisualizerEvents.loading);
                        loader = loaders_1.AudioVisualizerLoaderFactory.newAudioVisualizerLoader(audio);
                        return [4 /*yield*/, loader.loadAudio(audio)];
                    case 1:
                        arrayBuffer = _b.sent();
                        _a = this;
                        return [4 /*yield*/, this.audioContext.decodeAudioData(arrayBuffer)];
                    case 2:
                        _a.audioBuffer = _b.sent();
                        this.context.setAudioContext(this.audioContext);
                        this.context.setAnalyser(this.analyser);
                        events_1.emitter.emit(events_1.AudioVisualizerEvents.loaded);
                        return [3 /*break*/, 5];
                    case 3:
                        error_1 = _b.sent();
                        events_1.emitter.emit(events_1.AudioVisualizerEvents.error, error_1);
                        return [3 /*break*/, 5];
                    case 4:
                        setLoading(false);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AudioVisualizerController.prototype.play = function () {
        var offset = this.pausedAt;
        this.audioSource = this.audioContext.createBufferSource();
        this.audioSource.connect(this.gain);
        this.audioSource.buffer = this.audioBuffer;
        this.audioSource.start(0, offset);
        this.startedAt = this.audioContext.currentTime - offset;
        this.context.setStatus(types_1.AudioVisualizerStatus.playing);
    };
    AudioVisualizerController.prototype.pause = function () {
        var elapsed = this.audioContext.currentTime - this.startedAt;
        this.pausedAt = elapsed;
        if (this.audioSource) {
            this.audioSource.disconnect();
            this.audioSource.stop();
        }
        this.context.setStatus(types_1.AudioVisualizerStatus.paused);
    };
    AudioVisualizerController.prototype.setVolume = function (volume) {
        this.gain.gain.value = volume;
    };
    AudioVisualizerController.prototype.clean = function () {
        this.audioContext.close();
    };
    return AudioVisualizerController;
}());
exports.AudioVisualizerController = AudioVisualizerController;
