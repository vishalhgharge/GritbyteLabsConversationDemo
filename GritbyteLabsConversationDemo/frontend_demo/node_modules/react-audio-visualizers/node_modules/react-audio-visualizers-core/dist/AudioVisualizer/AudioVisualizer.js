"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioVisualizer = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var AudioVisualizerProvider_1 = require("./AudioVisualizerProvider");
var AudioVisualizerUI_1 = require("./AudioVisualizerUI");
var AudioVisualizerScene_1 = require("./AudioVisualizerScene");
var AudioVisualizer_styles_1 = require("./AudioVisualizer.styles");
var AudioVisualizer = function (_a) {
    var children = _a.children, audio = _a.audio, canvasProps = _a.canvasProps, smoothingTimeConstant = _a.smoothingTimeConstant, fftSize = _a.fftSize, volume = _a.volume, iconsColor = _a.iconsColor, showMainActionIcon = _a.showMainActionIcon, showLoaderIcon = _a.showLoaderIcon, backgroundColor = _a.backgroundColor, backgroundImage = _a.backgroundImage, mainActionRender = _a.mainActionRender, onEvent = _a.onEvent;
    return ((0, jsx_runtime_1.jsx)(AudioVisualizerProvider_1.AudioVisualizerProvider, { children: (0, jsx_runtime_1.jsxs)("div", __assign({ className: AudioVisualizer_styles_1.styles.audioVisualizer }, { children: [(0, jsx_runtime_1.jsx)(AudioVisualizerUI_1.AudioVisualizerUI, { audio: audio, smoothingTimeConstant: smoothingTimeConstant, fftSize: fftSize, volume: volume, iconsColor: iconsColor, showMainActionIcon: showMainActionIcon, showLoaderIcon: showLoaderIcon, mainActionRender: mainActionRender, onEvent: onEvent }, void 0), (0, jsx_runtime_1.jsx)(AudioVisualizerScene_1.AudioVisualizerScene, __assign({ canvasProps: canvasProps, backgroundColor: backgroundColor, backgroundImage: backgroundImage }, { children: children }), void 0)] }), void 0) }, void 0));
};
exports.AudioVisualizer = AudioVisualizer;
