"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SquaredBarsWaveformVisualizer = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var fiber_1 = require("@react-three/fiber");
var three_1 = require("three");
var react_audio_visualizers_core_1 = require("react-audio-visualizers-core");
var WaveformVisualizer_1 = require("./WaveformVisualizer");
var SquaredBar_1 = require("../shared/components/SquaredBar");
var clock = new three_1.Clock();
var SquaredBarsWaveformVisualizer = function (_a) {
    var colors = _a.colors, barWidth = _a.barWidth, barMargin = _a.barMargin, refreshRate = _a.refreshRate;
    var _b = (0, react_audio_visualizers_core_1.useAudioVisualizerContext)(), audioContext = _b.audioContext, analyser = _b.analyser, status = _b.status;
    var _c = (0, fiber_1.useThree)().viewport, viewportWidth = _c.width, viewportHeight = _c.height;
    var halfVisualizerWidth = viewportWidth / 2;
    var dataArray = new Uint8Array(analyser ? analyser.frequencyBinCount : 0);
    var nBars = Math.round(viewportWidth / (barWidth + barMargin)) + 1;
    var refs = (0, react_1.useMemo)(function () { return Array.from(Array(nBars)).map(function (_) { return (0, react_1.createRef)(); }); }, [nBars]);
    var bars = (0, react_1.useMemo)(function () { return Array.from(Array(nBars), function (_, i) { return ((0, jsx_runtime_1.jsx)(SquaredBar_1.SquaredBar, { height: WaveformVisualizer_1.MIN_BAR_HEIGHT, colors: colors, width: barWidth, position: [halfVisualizerWidth - (barWidth + barMargin) * i, viewportHeight], meshRef: refs[i] }, i)); }); }, [nBars, refs, halfVisualizerWidth, viewportHeight, colors, barWidth, barMargin]);
    (0, fiber_1.useFrame)(function () {
        var _a, _b, _c, _d;
        if (analyser && audioContext && status === react_audio_visualizers_core_1.AudioVisualizerStatus.playing && clock.getElapsedTime() > refreshRate) {
            analyser.getByteTimeDomainData(dataArray);
            var height = Math.max(react_audio_visualizers_core_1.AudioVisualizerUtils.map(Math.max.apply(Math, Array.from(dataArray)), WaveformVisualizer_1.MIN_DECIBEL, WaveformVisualizer_1.MAX_DECIBEL, 0, viewportHeight - WaveformVisualizer_1.DEFAULT_MARGIN_HEIGHT_TOP), 0) || WaveformVisualizer_1.MIN_BAR_HEIGHT;
            for (var i = nBars - 1; i >= 0; i--) {
                var geometryPosition = (_a = refs[i].current) === null || _a === void 0 ? void 0 : _a.geometry.attributes.position;
                var meshPosition = (_b = refs[i].current) === null || _b === void 0 ? void 0 : _b.position;
                if (i === 0) {
                    var halfHeight = height * 0.5;
                    geometryPosition.setY(0, halfHeight);
                    geometryPosition.setY(1, halfHeight);
                    geometryPosition.setY(2, -halfHeight);
                    geometryPosition.setY(3, -halfHeight);
                    meshPosition.setY(WaveformVisualizer_1.MIN_BAR_HEIGHT * -0.5);
                }
                else {
                    var previousGeometryPosition = (_c = refs[i - 1].current) === null || _c === void 0 ? void 0 : _c.geometry.attributes.position;
                    var topY = previousGeometryPosition === null || previousGeometryPosition === void 0 ? void 0 : previousGeometryPosition.getY(0);
                    var bottomY = previousGeometryPosition === null || previousGeometryPosition === void 0 ? void 0 : previousGeometryPosition.getY(2);
                    var previousMeshPosition = (_d = refs[i - 1].current) === null || _d === void 0 ? void 0 : _d.position;
                    geometryPosition.setY(0, topY);
                    geometryPosition.setY(1, topY);
                    geometryPosition.setY(2, bottomY);
                    geometryPosition.setY(3, bottomY);
                    meshPosition.setY(previousMeshPosition.y);
                }
                geometryPosition.needsUpdate = true;
            }
            clock.start();
        }
    });
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: bars }, void 0);
};
exports.SquaredBarsWaveformVisualizer = SquaredBarsWaveformVisualizer;
