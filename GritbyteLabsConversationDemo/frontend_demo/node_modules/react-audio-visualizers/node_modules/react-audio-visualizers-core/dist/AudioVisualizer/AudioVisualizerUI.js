"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioVisualizerUI = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var react_dom_1 = __importDefault(require("react-dom"));
var AudioVisualizerController_1 = require("./AudioVisualizerController");
var AudioVisualizerProvider_1 = require("./AudioVisualizerProvider");
var events_1 = require("./events");
var icons_1 = require("./icons");
var MainActionButton_1 = require("./MainActionButton");
var AudioVisualizer_styles_1 = require("./AudioVisualizer.styles");
var DEFAULT_ICONS_COLOR = 'white';
var DEFAULT_SHOW_MAIN_ACTION_ICON = false;
var DEFAULT_SHOW_LOADER_ICON = false;
var AudioVisualizerUI = function (_a) {
    var audio = _a.audio, smoothingTimeConstant = _a.smoothingTimeConstant, fftSize = _a.fftSize, volume = _a.volume, mainActionRender = _a.mainActionRender, onEvent = _a.onEvent, _b = _a.iconsColor, iconsColor = _b === void 0 ? DEFAULT_ICONS_COLOR : _b, _c = _a.showMainActionIcon, showMainActionIcon = _c === void 0 ? DEFAULT_SHOW_MAIN_ACTION_ICON : _c, _d = _a.showLoaderIcon, showLoaderIcon = _d === void 0 ? DEFAULT_SHOW_LOADER_ICON : _d;
    var context = (0, react_1.useContext)(AudioVisualizerProvider_1.AudioVisualizerContextProvider);
    var controller = (0, react_1.useRef)(new AudioVisualizerController_1.AudioVisualizerController(context, smoothingTimeConstant, fftSize));
    var _e = (0, react_1.useState)(false), playing = _e[0], setPlaying = _e[1];
    var _f = (0, react_1.useState)(false), hovering = _f[0], setHovering = _f[1];
    var _g = (0, react_1.useState)(false), loading = _g[0], setLoading = _g[1];
    var play = (0, react_1.useCallback)(function () {
        controller.current.play();
        setPlaying(true);
        events_1.emitter.emit(events_1.AudioVisualizerEvents.playing);
    }, [controller, setPlaying]);
    var pause = (0, react_1.useCallback)(function () {
        controller.current.pause();
        setPlaying(false);
        events_1.emitter.emit(events_1.AudioVisualizerEvents.paused);
    }, [controller, setPlaying]);
    var onMouseEnter = (0, react_1.useCallback)(function () { return setHovering(true); }, [setHovering]);
    var onMouseLeave = (0, react_1.useCallback)(function () { return setHovering(false); }, [setHovering]);
    (0, react_1.useEffect)(function () {
        return function () {
            controller.current.pause();
        };
    }, []);
    (0, react_1.useEffect)(function () {
        events_1.emitter.subscribe(onEvent);
    }, [onEvent]);
    (0, react_1.useEffect)(function () {
        var visualizerController = controller.current;
        if (audio) {
            visualizerController.loadAudio(audio, setLoading);
        }
    }, [audio]);
    (0, react_1.useEffect)(function () {
        var visualizerController = controller.current;
        if (volume !== undefined && !isNaN(volume)) {
            visualizerController.setVolume(volume);
        }
    }, [volume]);
    (0, react_1.useEffect)(function () {
        if (mainActionRender) {
            var _a = mainActionRender({ play: play, pause: pause }), id = _a.id, node = _a.node;
            var container = document.getElementById(id);
            if (container) {
                react_dom_1.default.render(node, container);
            }
        }
    }, [mainActionRender, play, pause]);
    return ((0, jsx_runtime_1.jsx)("div", __assign({ className: AudioVisualizer_styles_1.styles.audioVisualizerUi }, { children: showLoaderIcon && loading ? ((0, jsx_runtime_1.jsx)(icons_1.LoaderIcon, { color: iconsColor }, void 0)) : (audio && !loading && (playing ? ((0, jsx_runtime_1.jsx)(MainActionButton_1.MainActionButton, __assign({ onClick: pause, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave }, { children: showMainActionIcon && hovering && (0, jsx_runtime_1.jsx)(icons_1.PauseIcon, { fill: iconsColor }, void 0) }), void 0)) : ((0, jsx_runtime_1.jsx)(MainActionButton_1.MainActionButton, __assign({ onClick: play, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave }, { children: showMainActionIcon && hovering && (0, jsx_runtime_1.jsx)(icons_1.PlayIcon, { fill: iconsColor }, void 0) }), void 0)))) }), void 0));
};
exports.AudioVisualizerUI = AudioVisualizerUI;
